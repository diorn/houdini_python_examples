import hou
import toolutils
# Current selected Asset Node Name  
currentNode = hou.selectedNodes()[0]
currentNode_name = currentNode.name()
print currentNode


rootnode = currentNode.node('material_network').path()  # Create Path to Matnetwork
#print rootnode

matnet_name = hou.node(rootnode)                 # Get MatNewtork Node 
#print matnet_name

   
shaders = matnet_name.children()                 # get all the shaders list
#print shaders

shader_name = shaders[0]                         # get all ops inside shader 1


mat = shader_name.node('Material1')






#Add TranslWeight
mat.parm('transl_weight').setExpression('ch("../../../transl_weight")')


#Create CC rs color layer
CC = shaders[0].createNode('RSColorLayer','CC')
CC.setColor(hou.Color((0,1,0)))

#Connect CC to proper place
switch_var = shader_name.node('VAR_switcher')
toolutils.replaceOutputConnections(switch_var, 0, CC, 0) 
CC.moveToGoodPosition()
CC.setInput(0,switch_var,0) 

#Set CC to params
CC.parm('layer1_blend_mode').set('Average')            #set CCx parameter
CC.parm('layer1_colorr').setExpression('ch("../../../cc_colorr")')
CC.parm('layer1_colorg').setExpression('ch("../../../cc_colorg")')
CC.parm('layer1_colorb').setExpression('ch("../../../cc_colorb")')
CC.parm('layer1_mask').setExpression('ch("../../../cc_mix")')


#Add correct RS color Layer
#Create CC rs color layer
Cdv = shaders[0].createNode('RSColorLayer','CD_variation')
Cdv.setColor(hou.Color((0,1,0)))
#Connect CC to proper place
toolutils.replaceOutputConnections(CC, 0, Cdv, 0) 
Cdv.moveToGoodPosition()
Cdv.setInput(0,CC,0)
#Set CC to params
Cdv.parm('layer1_blend_mode').set('Overlay')            #set CCx parameter
Cdv.parm('layer1_mask').setExpression('ch("../../../color_var")')
#Connect to User CD-node
User_CD = shader_name.node('RSUser_CD')
Cdv.setInput(1,User_CD,0)



#Add Lod texture variation parameteres
shader_children = shader_name.children()
lookfor = "LOD_switcher"                 #look for this string in child nodes'names 
for child in shader_children:            #initialize a loop 
    namelod = child.name()               #read currently processed child name 
    fndstr = namelod.find(lookfor)       #look for the string of interest in that name 
    if fndstr != -1:                     #evaluate if the string was part of the name 
        #print "found:" + namelod         #if true, do this 
        node_lod = shader_name.node(namelod)
        node_lod.parm('selector').setExpression('ch("../lodsel")')  #set output usrdata to each input 1 of found lods
#Set old texture variation parameters
switch_var.parm('selector').setExpression('ch("../oldvar")')
  
        
        
#Add BumpMap
bump = shaders[0].createNode('BumpMap','RS_Bump')
bump.moveToGoodPosition()
bump.setColor(hou.Color((0,1,0)))
##Connect bmp to proper place
ls3 = shader_name.node('LOD_switcher3')
toolutils.replaceOutputConnections(ls3, 0, bump, 0) 
bump.setInput(0,ls3,0) 
##Set bmp parms
bump.parm('inputType').set('Tangent-Space_Normal') 
bump.parm('scale').setExpression('ch("../../../bmpscale")') 



#Delete wrong RSColorMix2
oldcolormix=shader_name.node('RSColorMix2')
oldcolormix.destroy()

##########################################################################################
#Add RSmat override params
n = hou.node("/obj/box_object1/box1")
g = n.parmTemplateGroup()
p = hou.ToggleParmTemplate("parm3", "Parameter 3", default_value=False)

# replace(old parm id or index, new parm)
g.replace("parm2", p)

n.setParmTemplateGroup(g)









